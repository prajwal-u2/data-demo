allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    group = 'org.msse.demo'
    version = '0.1.0'

    java {
      sourceCompatibility = JavaVersion.VERSION_21
      targetCompatibility = JavaVersion.VERSION_21
    }

    repositories {
        mavenCentral()
    }

    dependencies {}

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }

    jar {
        manifest.attributes provider: 'gradle'
    }
}


apply plugin: 'docker-compose'

// projectName for each project should match .env/COMPOSE_PROJECT_NAME
// this allows for cli and gradle tasks to co-exist.

dockerCompose {
    // ./gradlew postgresComposeUp|postgresComposeDown|postgresComposeDownForced
    postgres {
        projectName = 'data-demo-postgres'
        composeAdditionalArgs = [ '--env-file', './postgres/local/.env' ]
        useComposeFiles = ['./postgres/local/docker-compose.yml']
    }
    // ./gradlew redisComposeUp|redisComposeDown|redisComposeDownForced
    redis {
        projectName = 'data-demo-redis'
        composeAdditionalArgs = [ '--env-file', './kafka/local/redis/.env' ]
        useComposeFiles = ['./kafka/local/redis/docker-compose.yml']
    }
    // ./gradlew kafkaComposeUp|kafkaComposeDown|kafkaComposeDownForced
    kafka1 {
        // keep projectName identical to the COMPOSE_PROJECT_NAME in the .env file.
        projectName = 'data-demo-kafka-1'
        composeAdditionalArgs = [ '--env-file', './kafka/local/kafka-1/.env' ]
        useComposeFiles = ['./kafka/local/kafka-1/docker-compose.yml']
    }
    kafka {
        projectName = 'data-demo-kafka-3'
        composeAdditionalArgs = [ '--env-file', './kafka/local/kafka-3/.env' ]
        useComposeFiles = ['./kafka/local/kafka-3/docker-compose.yml']
    }
    kafkaCore {
        projectName = 'data-demo-kafka-3'
        startedServices = [ 'broker-1', 'broker-2', 'broker-3' ]
        composeAdditionalArgs = [ '--env-file', './kafka/local/kafka-3/.env' ]
        useComposeFiles = ['./kafka/local/kafka-3/docker-compose.yml' ]
    }
    // ./gradlew redpandaComposeUp|redpandaComposeDown|redpandaComposeDownForced
    redpanda {
        projectName = 'data-demo-redpanda'
        composeAdditionalArgs = [ '--env-file', './kafka/local/redpanda/.env' ]
        useComposeFiles = ['./kafka/local/redpanda/docker-compose.yml']
    }
    // ./gradlew s3ComposeUp|s3ComposeDown|s3ComposeDownForced
    s3 {
        composeAdditionalArgs = [ '--env-file', './observability/s3/.env' ]
        useComposeFiles = ['./observability/s3/docker-compose.yml']
    }

    tracing {
        useComposeFiles = [
                './observability/jaeger/docker-compose.yml'
        ]
    }
}

task dockerCreateNetwork(type: Exec) {
    workingDir "$projectDir/kafka/local"
    commandLine 'sh', './network.sh'
}

task fullComposeUp {
    dependsOn 'postgresComposeUp'
    dependsOn 'kafkaComposeUp'
}

task fullComposeDown {
    dependsOn 'postgresComposeDownForced'
    dependsOn 'kafkaComposeDownForced'
}

postgresComposeUp.dependsOn([dockerCreateNetwork])
redisComposeUp.dependsOn([dockerCreateNetwork])
kafkaComposeUp.dependsOn([dockerCreateNetwork, tasks.named("redisComposeUp")])
kafka1ComposeUp.dependsOn([dockerCreateNetwork, tasks.named("redisComposeUp")])
redpandaComposeUp.dependsOn([dockerCreateNetwork, tasks.named("redisComposeUp")])

// make sure any of the kafka clusters are down
redisComposeDown.dependsOn([tasks.named("kafkaComposeDown"), tasks.named("kafka1ComposeDown")])

fullComposeUp.dependsOn dockerCreateNetwork
tracingComposeUp.dependsOn dockerCreateNetwork
s3ComposeUp.dependsOn dockerCreateNetwork
